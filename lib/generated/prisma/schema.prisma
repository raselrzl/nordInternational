generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  newsReporter newsReporter?
  Advertiser   Advertiser?

  userType       UserType?
  approvalStatus ApprovalStatus?

  onboardingCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  NEWSREPORTER
  ADVERTISER
  SUPERADMIN
  SOMPANDOK
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECT
}

model newsReporter {
  id                     String  @id @default(uuid())
  reporterName           String?
  location               String
  bio                    String
  profilePicture         String
  phoneNumber            String
  facebookProfileAddress String?

  newsArticle newsArticle[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  registered Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Advertiser {
  id             String  @id @default(uuid())
  supervisorName String
  companyName    String
  companyAddress String
  phoneNumber    String
  aboutCompany   String
  companyWebsite String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  registered Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model newsArticle {
  id                 String       @id @default(uuid())
  newsHeading        String
  newsResource       String
  newsLocation       String?
  newsCategory       newsCategory
  newsPicture        String
  newsPictureHeading String
  newsPictureCredit  String
  isFeatured         Boolean      @default(false)
  newsDetails        String
  quotes             quote[]

  newsReporter newsReporter @relation(fields: [reporterId], references: [id])
  reporterId   String

  duration          Int?
  newsArticleStatus newsArticleStatus @default(DRAFT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum newsArticleStatus {
  ACTIVE
  DRAFT
  EXPIRED
}

model quote {
  id          String      @id @default(uuid())
  text        String
  speakerInfo String
  article     newsArticle @relation(fields: [articleId], references: [id])
  articleId   String
  createdAt   DateTime    @default(now())
}

enum newsCategory {
  LATEST
  NATIONAL
  POLITICS
  COUNTRYWIDE
  INTERNATIONAL
  SPORTS
  EDUCATION
  HEALTH
  OPINION
  RELIGION
  CRIME
  TECHNOLOGY
  ENTERTAINMENT
  ECONOMY
  LAW_AND_JUSTICE
  ENVIRONMENT
  SCIENCE
}

model Advertisement {
  id                 String             @id @default(uuid())
  companyName        String
  companyaddress     String
  supervisedName     String
  advertisedCategory AdvertisedCategory
  websiteLink        String
  additionalInfo     String
  advertiseBanner    String
  isFeatured         Boolean            @default(false)

  endDate               String
  startDate             String
  supervisedPhonenumber String
  advertiseduration     Int?
  advertiseStatus       advertiseStatus @default(DRAFT)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

enum advertiseStatus {
  ACTIVE
  DRAFT
  EXPIRED
}

model Opinion {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  opinion   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AdvertisedCategory {
  PREMIER_1
  PREMIER_2
  SIZE_1
  SIZE_2
  SUPER_1
  SUPER_2
  PREMIUM_1
  PREMIUM_2
  STANDARD_1
  STANDARD_2
  DELUXE_1
  DELUXE_2
  ULTIMATE_1
  ULTIMATE_2
  BASIC_1
  BASIC_2
  PRO_1
  PRO_2
  ENTERPRISE_1
  ENTERPRISE_2
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model AdvertiseRequest {
  id             String   @id @default(uuid())
  name           String
  email          String
  companyName    String
  companyWebsite String
  phoneNumber    String
  message        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Videopost {
  id            String      @id @default(uuid())
  videoAbout    String
  videoHeadings String
  videoLink     String
  isFeatured    Boolean     @default(false)
  startDate     String
  vedioStatus   vedioStatus @default(DRAFT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum vedioStatus {
  ACTIVE
  DRAFT
  EXPIRED
}

model RouteVisit {
  id        Int      @id @default(autoincrement())
  fullUrl   String   @unique
  hits      Int      @default(0)
  route     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
